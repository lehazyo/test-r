{"version":3,"sources":["types/task.ts","utils/dnd-item-types.ts","components/task-item/task-item.tsx","utils/map-task-status-to-label.ts","components/column/column.tsx","components/columns/columns.tsx","components/details-panel/details-panel-header.tsx","components/details-panel/details-panel.tsx","utils/task-priority.ts","mobx-store/task-store.ts","components/task-board/task-board.tsx","index.js"],"names":["TaskStatus","TaskPriority","DndItemTypes","TaskItem","observer","id","title","priority","taskStore","useContext","TaskContext","useDrag","type","collect","monitor","isDragging","end","item","dropResult","getDropResult","setStatus","status","dragRef","taskItemRef","useRef","useEffect","current","addEventListener","setSelectedId","isIdSelected","taskCssClasses","push","taskIsSelected","ref","className","join","mapTaskStatusToLabel","DONE","IN_PROGRESS","PLAN","TESTING","Error","Column","useDrop","accept","drop","dropRef","taskListContent","isTasksLoading","getTasksByStatus","map","task","nanoid","Columns","DetailsPanelHeader","selectedTask","closerRef","DetailsPanel","getSelectedTask","lastName","firstName","date","taskPriorityArray","MUST","SHOULD","COULD","TaskStore","options","privates","observable","allTasks","tasksLoading","selectedId","tasksByStatus","Map","delayedLoad","initialTasks","this","loadTasks","undefined","localStorage","tasksJson","getItem","JSON","parse","localTasks","parseLocalStorageTasks","setTimeout","Math","random","getSelectedId","arrayToSort","sort","a","b","aFullName","bFullName","aPriority","indexOf","bPriority","get","filter","sortTasks","set","returnResult","find","taskById","oldStatus","oldStatusTasks","taskToDeleteIndex","findIndex","splice","newStatusTasks","writeTasksToLocalStorage","stringify","setItem","action","computed","jsonTasks","createContext","TaskBoard","window","e","key","DndProvider","backend","HTML5Backend","Provider","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8403082.chunk.js","sourcesContent":["export type Task = {\r\n  id: number;\r\n  title: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  status: TaskStatus;\r\n  priority: TaskPriority;\r\n  date: string;\r\n};\r\n\r\nexport enum TaskStatus {\r\n  PLAN = 'PLAN',\r\n  IN_PROGRESS = 'IN_PROGRESS',\r\n  TESTING = 'TESTING',\r\n  DONE = 'DONE',\r\n};\r\n\r\nexport enum TaskPriority {\r\n  MUST = 'MUST',\r\n  SHOULD = 'SHOULD',\r\n  COULD = 'COULD',\r\n};\r\n","export const DndItemTypes = {\r\n  TASK_ITEM: 'TASK_ITEM'\r\n};\r\n","import React, { FC, useContext, useEffect, useRef } from 'react';\r\nimport { useDrag } from 'react-dnd'\r\nimport { Task, TaskStatus } from '../../types/task';\r\nimport { TaskContext } from '../task-board/task-board';\r\nimport { TaskStore } from '../../mobx-store/task-store';\r\nimport { observer } from 'mobx-react';\r\nimport './task-item.scss';\r\nimport { DndItemTypes } from '../../utils/dnd-item-types';\r\n\r\ninterface DropResult {\r\n  status: TaskStatus;\r\n}\r\n\r\nexport const TaskItem: FC<Task> = observer(({\r\n  id,\r\n  title,\r\n  priority,\r\n}) => {\r\n  const taskStore: TaskStore = useContext(TaskContext);\r\n\r\n  // drag-n-drop\r\n  const [{ isDragging }, dragRef] = useDrag(() => ({\r\n    type: DndItemTypes.TASK_ITEM,\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging()\r\n    }),\r\n    end: (item, monitor) => {\r\n      const dropResult = monitor.getDropResult<DropResult>();\r\n      if (dropResult !== null) {\r\n        taskStore.setStatus(id, dropResult.status);\r\n      }\r\n    }\r\n  }));\r\n\r\n  const taskItemRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    if (taskItemRef.current !== null) {\r\n      taskItemRef.current.addEventListener(\"click\", () =>\r\n        taskStore.setSelectedId((taskStore.isIdSelected(id)) ? null : id));\r\n    }\r\n    // @ts-ignore react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const taskCssClasses = [\r\n    'task-wrapper',\r\n    `priority-${priority}`,\r\n  ];\r\n\r\n  if (isDragging) {\r\n    taskCssClasses.push('task-wrapper--dragged');\r\n  }\r\n\r\n  const taskIsSelected = taskStore.isIdSelected(id);\r\n  if (taskIsSelected) {\r\n    taskCssClasses.push('task-wrapper--selected');\r\n  }\r\n\r\n  return (\r\n    <div ref={dragRef} className=\"task-wrapper-dragger\">\r\n      <div\r\n        ref={taskItemRef}\r\n        aria-label={(taskIsSelected) ? `Details of TSK-${id} are open` : \"\"}\r\n        className={taskCssClasses.join(\" \")}\r\n      >\r\n        <header className=\"task-header\">TSK-{id}</header>\r\n        <div className=\"task-body\">\r\n          <div className=\"task-title\">{title}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import { TaskStatus } from \"../types/task\";\r\n\r\nexport const mapTaskStatusToLabel = (status: TaskStatus): string => {\r\n  switch (status) {\r\n    case TaskStatus.DONE:\r\n      return 'Done';\r\n    case TaskStatus.IN_PROGRESS:\r\n      return 'In Progress';\r\n    case TaskStatus.PLAN:\r\n      return 'Plan';\r\n    case TaskStatus.TESTING:\r\n      return 'Testing';\r\n    default:\r\n      throw new Error('Unknown TaskStatus used');\r\n  }\r\n};\r\n","import React, { FC, useContext } from 'react';\r\nimport { TaskStatus } from '../../types/task';\r\nimport { TaskItem } from '../task-item/task-item';\r\nimport { TaskContext } from '../task-board/task-board';\r\nimport { TaskStore } from '../../mobx-store/task-store';\r\nimport { mapTaskStatusToLabel } from '../../utils/map-task-status-to-label';\r\nimport './column.scss';\r\nimport { nanoid } from 'nanoid';\r\nimport { observer } from 'mobx-react';\r\nimport { useDrop } from 'react-dnd'\r\nimport { DndItemTypes } from '../../utils/dnd-item-types';\r\n\r\nexport interface ColumnProps {\r\n  status: TaskStatus;\r\n}\r\n\r\nexport const Column: FC<ColumnProps> = observer(({ status }) => {\r\n  const [, dropRef] = useDrop(\r\n    () => ({\r\n      accept: DndItemTypes.TASK_ITEM,\r\n      drop: () => ({ status })\r\n    }), []\r\n  );\r\n\r\n  const taskStore: TaskStore = useContext(TaskContext);\r\n\r\n  const taskListContent = (taskStore.isTasksLoading())\r\n    ? <div aria-label=\"Tasks are loading...\" className=\"column-preloader\" />\r\n    : taskStore.getTasksByStatus(status).map((task) => <TaskItem key={nanoid()} {...task} />);\r\n  \r\n  return (\r\n    <div className=\"column-wrapper\" ref={dropRef}>\r\n      <header className=\"column-header\">{mapTaskStatusToLabel(status)}</header>\r\n      <div className=\"column-tasks-wrapper\">{taskListContent}</div>\r\n    </div>\r\n  )\r\n});\r\n","import React from 'react';\r\nimport { Column } from '../column/column';\r\nimport { TaskStatus } from '../../types/task';\r\nimport { nanoid } from 'nanoid';\r\nimport './columns.scss';\r\n\r\nexport const Columns = () => (\r\n  <div className=\"columns-wrapper\">{[\r\n    TaskStatus.PLAN,\r\n    TaskStatus.IN_PROGRESS,\r\n    TaskStatus.TESTING,\r\n    TaskStatus.DONE,\r\n  ].map((status) => <Column key={nanoid()} status={status} />)}</div>\r\n);\r\n","import React, { FC, useContext, useEffect, useRef } from 'react';\r\nimport { Task } from '../../types/task';\r\nimport { TaskContext } from '../task-board/task-board';\r\nimport { observer } from 'mobx-react';\r\nimport './details-panel-header.scss';\r\n\r\nexport interface DetailsPanelHeaderProps {\r\n  selectedTask: Task;\r\n}\r\n\r\nexport const DetailsPanelHeader: FC<DetailsPanelHeaderProps> = observer(({ selectedTask }) => {\r\n  const taskStore = useContext(TaskContext);\r\n\r\n  const closerRef = useRef<HTMLButtonElement>(null);\r\n  useEffect(() => {\r\n    if (closerRef.current !== null) {\r\n      closerRef.current.addEventListener(\"click\", () => {\r\n        taskStore.setSelectedId(null);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <header className={`details-panel-header priority-${selectedTask.priority}`}>\r\n      <span className=\"details-panel-id\">TSK-{selectedTask.id}</span>\r\n      <span className=\"details-panel-title\">{selectedTask.title}</span>\r\n\r\n      <button\r\n        className=\"details-panel-closer\"\r\n        aria-label=\"Close task details panel\"\r\n        ref={closerRef}\r\n      >🗙</button>\r\n    </header>\r\n  );\r\n});\r\n","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { TaskContext } from '../task-board/task-board';\r\nimport { DetailsPanelHeader } from './details-panel-header';\r\nimport './details-panel.scss';\r\nimport { mapTaskStatusToLabel } from '../../utils/map-task-status-to-label';\r\n\r\nexport const DetailsPanel = observer(() => {\r\n  const taskStore = useContext(TaskContext);\r\n\r\n  const selectedTask = taskStore.getSelectedTask();\r\n\r\n  if (!selectedTask) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"details-panel-wrapper\">\r\n      <DetailsPanelHeader selectedTask={selectedTask} />\r\n      <div className=\"details-panel-body\">\r\n        <div className=\"details-panel-assignee\">\r\n          Assignee: {selectedTask.lastName}, {selectedTask.firstName}\r\n        </div>\r\n        <div className=\"details-panel-assignee\">\r\n          Date created: {selectedTask.date}\r\n        </div>\r\n        <div className=\"details-panel-status\">\r\n          Status: {mapTaskStatusToLabel(selectedTask.status)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import { TaskPriority } from \"../types/task\";\r\n\r\nexport const taskPriorityArray = [\r\n  TaskPriority.MUST,\r\n  TaskPriority.SHOULD,\r\n  TaskPriority.COULD,\r\n];","import { action, computed, observable } from 'mobx';\r\nimport { Task, TaskStatus } from '../types/task';\r\nimport { taskPriorityArray } from '../utils/task-priority';\r\n\r\ninterface TaskStoreParams {\r\n  allTasks: Task[];\r\n  tasksLoading: boolean;\r\n  selectedId: number | null;\r\n  tasksByStatus: Map<TaskStatus, Task[]>;\r\n}\r\n\r\ninterface TaskStoreOptions {\r\n  delayedLoad: boolean;\r\n  initialTasks: Task[] | null;\r\n}\r\n\r\nexport class TaskStore {\r\n  private privates = observable({\r\n    allTasks: [],\r\n    tasksLoading: false,\r\n    selectedId: null,\r\n    tasksByStatus: new Map(),\r\n  } as TaskStoreParams);\r\n  private delayedLoad: boolean = false;\r\n  private initialTasks: Task[] | null = null;\r\n\r\n  constructor(options: TaskStoreOptions) {\r\n    this.delayedLoad = options.delayedLoad;\r\n    this.initialTasks = options.initialTasks;\r\n    this.loadTasks();\r\n  }\r\n\r\n  parseLocalStorageTasks(): Task[] | false {\r\n    if (localStorage === undefined) {\r\n      return false;\r\n    }\r\n    const tasksJson = localStorage.getItem(\"tasks\");\r\n    if (tasksJson === null || tasksJson === undefined) {\r\n      return false;\r\n    }\r\n    const parsedTasks = JSON.parse(tasksJson);\r\n    return parsedTasks.map((task: any) => {\r\n      return task as Task;\r\n    });\r\n  };\r\n\r\n  @action\r\n  loadTasks(): void {\r\n    if (this.delayedLoad) {\r\n      this.privates.tasksLoading = true;\r\n    }\r\n\r\n    const localTasks = this.parseLocalStorageTasks();\r\n\r\n    if (localTasks) {\r\n      this.privates.allTasks = localTasks;\r\n    } else {\r\n      this.privates.allTasks = (this.initialTasks !== null) \r\n        ? this.initialTasks\r\n        : [];\r\n    }\r\n  \r\n    if (this.delayedLoad) {\r\n      // imitation of http request delay\r\n      setTimeout(() => {\r\n        this.privates.tasksLoading = false;\r\n      }, 500 + Math.random() * 2000);\r\n    }\r\n  }\r\n\r\n  @action\r\n  setSelectedId(id: number | null): void {\r\n    this.privates.selectedId = id;\r\n  }\r\n\r\n  @computed\r\n  getSelectedId(): number | null {\r\n    return this.privates.selectedId;\r\n  }\r\n\r\n  @computed\r\n  isIdSelected(id: number): boolean {\r\n    return (id === this.getSelectedId());\r\n  }\r\n\r\n  sortTasks(arrayToSort: Task[]) {\r\n    arrayToSort.sort((a, b) => {\r\n      const aFullName = `${a.lastName} ${a.firstName}`;\r\n      const bFullName = `${b.lastName} ${b.firstName}`;\r\n\r\n      // first sort by Last name\r\n      if (aFullName > bFullName) {\r\n        return 1;\r\n      }\r\n\r\n      if (aFullName < bFullName) {\r\n        return -1;\r\n      }\r\n\r\n      // if Last names are equal, sort by priority\r\n      const aPriority = taskPriorityArray.indexOf(a.priority);\r\n      const bPriority = taskPriorityArray.indexOf(b.priority);\r\n      if (aPriority > bPriority) {\r\n        return 1;\r\n      }\r\n\r\n      return (aPriority < bPriority) ? -1 : 0;\r\n    });\r\n  }\r\n\r\n  @action\r\n  getTasksByStatus(status: TaskStatus): Task[] {\r\n    if (this.privates.tasksByStatus.get(status) === undefined) {\r\n      const tasksByStatus = this.privates.allTasks.filter((task) => task.status === status);  \r\n      this.sortTasks(tasksByStatus);\r\n      this.privates.tasksByStatus.set(status, tasksByStatus);\r\n    }\r\n    const returnResult = this.privates.tasksByStatus.get(status);\r\n    return returnResult ?? [];\r\n  }\r\n\r\n  isTasksLoading(): boolean {\r\n    return this.privates.tasksLoading;\r\n  }\r\n\r\n  getSelectedTask(): Task | null {\r\n    return this.privates.allTasks.find((task) => {\r\n      return task.id === this.privates.selectedId;\r\n    }) ?? null;\r\n  }\r\n\r\n  @action\r\n  setStatus(id: number, status: TaskStatus): void {\r\n    const taskById = this.privates.allTasks.find((task) => task.id === id);\r\n    if (!taskById) {\r\n      throw new Error('Task not found');\r\n    }\r\n    const oldStatus = taskById.status;\r\n    taskById.status = status;\r\n\r\n    const oldStatusTasks = this.getTasksByStatus(oldStatus);\r\n    const taskToDeleteIndex = oldStatusTasks.findIndex((task) => task.id === id);\r\n    oldStatusTasks.splice(taskToDeleteIndex, 1);\r\n    this.privates.tasksByStatus.set(oldStatus, oldStatusTasks);\r\n\r\n    const newStatusTasks = this.getTasksByStatus(status);\r\n    newStatusTasks.push(taskById);\r\n    this.sortTasks(newStatusTasks);\r\n    this.privates.tasksByStatus.set(status, newStatusTasks);\r\n\r\n    this.writeTasksToLocalStorage();\r\n  }\r\n\r\n  writeTasksToLocalStorage(): void {\r\n    if (localStorage === undefined) {\r\n      return;\r\n    }\r\n    const tasksJson = JSON.stringify(this.privates.allTasks);\r\n    localStorage.setItem(\"tasks\", tasksJson);\r\n  }\r\n}","import React, { createContext, useEffect } from 'react';\r\nimport { Columns } from '../columns/columns';\r\nimport { DetailsPanel } from '../details-panel/details-panel';\r\nimport { TaskStore } from '../../mobx-store/task-store';\r\nimport { DndProvider } from 'react-dnd'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport { Task } from '../../types/task';\r\nimport jsonTasks from '../../mocks/tasks.json';\r\nimport '../../common.scss';\r\nimport './task-board.scss';\r\n\r\nconst taskStore = new TaskStore({\r\n  delayedLoad: true,\r\n  initialTasks: (jsonTasks as Task[]),\r\n});\r\nexport const TaskContext = createContext(taskStore);\r\n\r\nexport const TaskBoard = () => {\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", (e) => {\r\n      if (e.key === \"Escape\") {\r\n        taskStore.setSelectedId(null);\r\n      }\r\n    })\r\n  }, []);\r\n\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <TaskContext.Provider value={taskStore}>\r\n        <section className=\"task-board-wrapper\">\r\n          <Columns />\r\n          <DetailsPanel />\r\n        </section>\r\n      </TaskContext.Provider>\r\n    </DndProvider>\r\n  );\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { TaskBoard } from './components/task-board/task-board';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TaskBoard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}